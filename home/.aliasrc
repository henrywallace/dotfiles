#!/bin/sh

alias sc='sudo systemctl '
alias scu='systemctl --user '
alias scr='sc daemon-reload; scu daemon-reload'

alias jc='sudo journalctl '
alias jcu='journalctl --user '

alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias df='df -h'
alias ln='ln -i'

alias v=nvim
# alias e='emacs -nw'  # always prefer terminal emacs: "no window"

vr() {
  recent=$1
  if [ -z "$recent" ]; then
    recent=0
  fi
  v -c "'$recent"
}

alias j='jobs -l'
if [ "$(uname -s)" = Linux ]; then
  alias ls='ls -F --color -H'
elif [ "$(uname -s)" = Darwin ]; then
  alias ls='ls -FGH'
fi
alias l='ls -lah'
alias ll='ls -laht'

if [ "$(uname -s)" = Darwin ]; then
  alias make='gmake'
fi

alias t='tmux'
alias tls='tmux ls'
# Attach to most recent tmux session, or one specified at $1, or create a new
# one otherwise.
ta() {
  if [ -z "$*" ]; then
    tmux attach || tmux
  else
    tmux attach -t "$@"
  fi
}
alias jql='jq . -C | le'
# Curl in site, and stream through jq.
cu() {
  curl -s "$1" | jql
}
# Define a nice pager.
alias le='less -FRSXF'

alias dfs='cd ~/dotfiles'

swap() {
  tmp=$(mktemp)
  mv "$1" "$tmp"
  mv "$2" "$1"
  mv "$tmp" "$2"
}

# Trailing space allows alias substitution [1] [2].
# [1] https://wiki.archlinux.org/index.php/Sudo#Passing_aliases
# [2] http://www.linuxcommand.org/lc3_man_pages/aliash.html
alias sudo='sudo '

# Time, status, and weather.
alias utc='TZ=":UTC" date'
alias ts='date +%s'
when() {
  echo """
${BOLD}Los Angeles$NC %% $(TZ=America/Los_Angeles date +"%H:%M %z")
${BOLD}New York$NC %% $(TZ=America/New_York date +"%H:%M %z")
${BOLD}UTC$NC %% $(TZ=UTC date +"%H:%M %z")
""" | column -t -s '%%'
}

# Search for stanza in ssh config whose Host name has a prefix $1.
sf() {
  rg -U "Host $1\w*?\n(?s:.)*?\n\n" ~/.ssh/config -N --color=never
}
# Similar to sc, but just print the ip address.
scip() {
  sf "$1" | rg Hostname | awk '{print $2}'
}

# case "$SHELL" in
#   *zsh)
#     alias fg='\fg %'
#     alias bg='\bg %'
#     ;;
#   *bash)
#     ;;
# esac

# Initialize a new python virtualenv.
nv() {
  virtualenv -p "$(command -v python3)" venv
  . venv/bin/activate && pip install pip-tools
}

alias ref='cd ~/projects/ref'

alias ic='$EDITOR ~/.config/i3/config'
alias ics='$EDITOR ~/.config/i3status/config'

alias m=paru

# uu() {
#   u
#   zup
#   tup
#   gup
#   cup
# }
cup() {
  go=(
    github.com/github/vulcanizer/cmd/vulcanizer
    github.com/golangci/golangci-lint/cmd/golangci-lint
    github.com/nametake/golangci-lint-langserver
  )
  for repo in "${go[@]}"; do
    echo "$repo"
    go install "$repo@latest"
  done
}
gup() {
  # arch linux has managed release so gcloud components update will fail
  if [ -f "/etc/arch-release" ]; then
    return
  fi
  if command -v gcloud &>/dev/null; then
    gcloud components update
  fi
}
zup() {
  ~/.zsh/update.sh
}
tup() {
  ~/.tmux/update.sh
}

touchp() {
  mkdir -p "$(dirname "$1")"
  touch "$1"
}

# Allow watch and xargs alias completion with space.
# https://unix.stackexchange.com/a/25329/162041
alias watch='watch --color '
alias xargs='xargs '

alias tree='tree -Ca -I .git'

colors() {
  for i in $(seq 0 255) ; do
    printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"
    if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then
        printf "\n";
    fi
done
}

# if command -v exa > /dev/null; then
#   alias ls='exa -F --group-directories-first'
#   alias lst='ls -T -L2'
# else
#   alias lst='tree -L 2'
# fi
# _j() {
#   case "$SHELL" in
#     *zsh) echo "%$1";;
#     *bash) echo "$1";;
#   esac
# }
# alias fg='fg $(_j $1)'
# alias bg='bg $(_j $1)'

# 1password
ops() {
  eval "$(op signin my)"
}
opf() {
  SMARTCASE=
  if echo "$@" | rg -q '^\s*(\p{Ll}\w*($|\s+))+'; then
    SMARTCASE='-i'
  fi
  op list items \
    | jq '.[] | .overview.title + "##" + .uuid' -r \
    | rg --color=always "$SMARTCASE" $@ \
    | column -t -s'##' \
    | sort
}
opx() {
  op get item "$1" \
    | jq -r '.details.fields | map(select(.name=="password")) | first | .value' \
    | xclip -i -sel clip
  {
    echo clearing clipboard in 60s
    sleep 60
    echo | xclip -i -sel clip
  } &
}

alias xc='xclip -i -sel clip'

#
# misc
#
bup() {
  set -x
}
rup() {
  set -x
  # rustup update nightly
  # cargo +nightly install-update -a
  rustup update
  cargo install-update -a
}

# Print out a line that spans the current width of the terminal. Takes no
# arguments.
div() {
  tput setaf 4
  tput bold
  printf "%$(tput cols)s\n" | tr " " =
  tput sgr0
}

path() {
  echo "$PATH" | tr ':' '\n'
}

# alias rg='rg --no-heading --sort path -M1024'

ports() {
  sudo lsof -i -n -P
}
# search aliases, and print them out in columns
ra() {
  alias | rg '"$@"' | rg "(\w+)='(.*)'" -r '$1%%$2' | column -t -s'%%'
}
# simple and quick HTTP server
serve() {
  local PORT="${1:-8000}"
  echo "http://localhost:$PORT"
  python3 -m http.server "$PORT" --bind 127.0.0.1
}

if command -v nex-env &>/dev/null; then
  alias n=nex-env
fi

#
# k8s + gcloud
#
alias k='kubectl '
# watch k8s pods
# wp() {
#   export -f kp
#   watch kp "$@"
# }
# watch deployments
wd() {
  export -f kd
  watch kd "$@"
}

#
# golang
#
alias gome='cd $FIRSTGOPATH/src/github.com/henrywallace'
gdoc() {
  echo http://localhost:6060
  godoc -play -notes="TODO|HELP|QUESTION|NOTE" -http 127.0.0.1:6060
}
gimp() {
  go list -f '{{ join .Imports "\n" }}' "$@" \
    | sort \
    | uniq -c \
    | sort -nk1
}


arx() {
  tar cf - "$1" -P | pv -s "$(du -sb "$1" | awk '{print $1}')" | gzip > "$1.tar.gz"
}

# Activate, and deactivate python virtualenvs, if applicable.
pe() {
  if [ -n "$VIRTUAL_ENV" ]; then
    deactivate
  fi
  local virtualenvs=$(fd -LI -d 3 -p '^.*/bin/activate$')
  local num=$(echo "$virtualenvs" | wc -l)
  head=$(echo $virtualenvs | head -n 1)
  tail=$(echo $virtualenvs | tail -n +2)
  if [ "$num" -gt 1 ]; then
    echo "${YELLOW}Warning, $num virtualenvs found, using first:$NC"
    echo -e "$BOLD$head$NC\n$DIM$tail$NC"
  fi
  . $(echo $virtualenvs | head -1)
}
de() {
  deactivate &> /dev/null
}

ipr() {
  ip route show | rg '^default.*src\s+((\d{1,4}\.?){4})' -or '$1' --color=never
}

# Start a jupyter notebook if applicable.
pj() {
  # TODO: Can we figure out how to get this to
  TRAPEXIT() {
    deactivate
  }
  pe
  jupyter notebook
}

compose() {
  if [ -z "$1" ]; then
    echo must provide filename
    exit 1
  fi

  if [ -e "$1" ]; then
    mdpreview "$1"
    return
  fi
  mkdir -p "$(dirname "$1")"
  touch "$1"
  mdpreview "$1"
}

vp() {
  fzf --preview 'bat --color=always -p {}' | xargs "$EDITOR"
}
vg() {
  git diff --name-only --relative | fzf | xargs "$EDITOR"
}


##
## git
##

alias lr='git log -n1 --no-merges --stat --abbrev=7'
alias lrp='git log -n1 --no-merges --stat --abbrev=7 -p'
# alias gl='git log $(git merge-base $(git symbolic-ref refs/remotes/origin/HEAD --short) HEAD)..HEAD'

alias gs='git status'
alias gS='git status -uno'

alias ga='git add -u'
alias gap='git add -p'
alias re='git reset'

alias gd='git diff'
alias gdc='git diff --cached'
alias gD='git diff --no-ext-diff'
alias gDc='git diff --no-ext-diff --cached'


alias rc='git rebase --continue'
alias gr='git rebase $(git symbolic-ref refs/remotes/origin/HEAD --short)'

alias g-='git checkout -'
alias gm='git branch -m'
alias gn='git checkout -b'
alias stp='git stash pop -q && git status'

st() {
  size=$(git stash list | wc -l | xargs)
  printf "Stash size: %s\n" "$size"
  printf "Recent stashes\n"
  git stash list --color=always --date=local | head -4
}

# alias gb=~/bin/git-branches
#alias groot='git rev-parse --show-toplevel'
#alias a='git add -u'
## alias gp='git pull --rebase'
## alias gua='git reset --soft HEAD@{1} && git reset'

#alias gdc='git diff --cached'
#alias gdd='git diff $(git merge-base master HEAD)'
#alias gds='echo; git diff --stat; echo'
#alias gf='git diff --name-only $(git merge-base master HEAD)'

#alias dirty='git diff --name-only --relative'
#rd() {
#  rg $@ $(git diff --name-only --relative $(git merge-base master HEAD))
#}

#alias gmp='git checkout $(git symbolic-ref refs/remotes/origin/HEAD --short) && git pull && git pb'

#alias rc='git rebase --continue'
#alias gk='git commit --allow-empty -m "CHECKPOINT"'

#alias pu='git push origin HEAD'
#alias fpu='git push -f origin HEAD'

#alias gls='git log --stat $(git merge-base master HEAD)..HEAD'
## alias gl='git log $(git merge-base master HEAD)..HEAD'
#alias gls='git log --stat'

#alias gpl='gpg --list-secret-keys --keyid-format LONG'

## git stash
#alias st='git stash --keep-index'
#alias fold='git stash --keep-index && git stash'
#alias stl='git stash list'
#alias stp='git stash pop'
