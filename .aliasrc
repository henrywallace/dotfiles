#!/bin/sh

. "$HOME/.colors"

# Quick access to editing config files.
alias aa='v ~/.aliasrc'
alias bb='v ~/.bashrc'
alias vv='v ~/.vimrc'
alias zz='v ~/.zshrc'

alias rs='rsync --info=progress2 --recursive --archive --partial --append-verify --one-file-system'
alias rsd='rs --delete'

# Prevent offering of all keys in ssh-agent [1]. If server is malicious then
# private keys can be snatched [2].
#
# [1] https://serverfault.com/a/515214/430816
# [2] https://krypt.co/docs/security/threat-model.html
alias ssh='ssh -o IdentitiesOnly=yes '

# TODO: tar progress
# https://superuser.com/a/665181/577047
# tar cf - /folder-with-big-files -P | pv -s $(du -sb /folder-with-big-files | awk '{print $1}') | gzip > big-files.tar.gz

alias xl='XSECURELOCK_PASSWORD_PROMPT=time_hex xsecurelock'


# Set a custom env EDITOR_THEME to light or dark depending on the time of day,
# assuming a static time-zone. Editors are responsible for respecting this env
# in their own config.
hour=$(TZ=America/New_York date +%H)
if [ 6 -le "$hour" ] && [ "$hour" -le 19 ]; then
  export EDITOR_THEME=LIGHT
else
  export EDITOR_THEME=DARK
fi
# override
EDITOR_THEME=DARK
# EDITOR_THEME=LIGHT

if command -v systemctl >/dev/null 2>&1; then
  alias sc='sudo systemctl '
  alias scu='systemctl --user '
fi
if command -v journalctl >/dev/null 2>&1; then
  alias jc='sudo journalctl '
  alias jcu='journalctl --user '
fi

alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias df='df -h'
alias ln='ln -i'

alias v=vim
alias e='emacs -nw'  # always prefer terminal emacs: "no window"

alias j='jobs -l'
alias l='ls'
alias ll='ls -lah'
if [ "$(uname -s)" = Linux ]; then
  alias ls='ls -F --color'
elif [ "$(uname -s)" = Darwin ]; then
  alias ls='ls -FG'
fi

alias t='tmux'
alias tls='tmux ls'
# Attach to most recent tmux session, or one specified at $1, or create a new
# one otherwise.
ta() {
  if [ -z "$*" ]; then
    tmux attach || tmux
  else
    tmux attach -t "$@"
  fi
}
alias jql='jq . -C | le'
# Curl in site, and stream through jq.
cu() {
  curl -s "$1" | jql
}
# Define a nice pager.
if command -v bat >/dev/null 2>&1; then
  alias le='bat -p'
else
  alias le='less -FXR'
fi

alias dfs='cd ~/dotfiles'

# Trailing space allows alias substitution [1] [2].
# [1] https://wiki.archlinux.org/index.php/Sudo#Passing_aliases
# [2] http://www.linuxcommand.org/lc3_man_pages/aliash.html
alias sudo='sudo '

# Time, status, and weather.
alias utc='TZ=":UTC" date'
alias ts='date +%s'
when() {
  echo """
${BOLD}Los Angeles$NC %% $(TZ=America/Los_Angeles date +"%H:%M %z")
${BOLD}New York$NC %% $(TZ=America/New_York date +"%H:%M %z")
${BOLD}UTC$NC %% $(TZ=UTC date +"%H:%M %z")
""" | column -t -s '%%'
}

# Search for stanza in ssh config whose Host name has a prefix $1.
sf() {
  rg -U "Host $1\w*?\n(?s:.)*?\n\n" ~/.ssh/config -N --color=never
}
# Similar to sc, but just print the ip address.
scip() {
  sf "$1" | rg Hostname | awk '{print $2}'
}

# Style man pages like in the arch install. I really dig it.
# man() {
#   LESS_TERMCAP_md=$'\e[01;31m' \
#   LESS_TERMCAP_me=$'\e[0m' \
#   LESS_TERMCAP_se=$'\e[0m' \
#   LESS_TERMCAP_so=$'\e[01;44;33m' \
#   LESS_TERMCAP_ue=$'\e[0m' \
#   LESS_TERMCAP_us=$'\e[01;32m' \
#   MANWIDTH=128 command man "$@"
# }

# case "$SHELL" in
#   *zsh)
#     alias fg='\fg %'
#     alias bg='\bg %'
#     ;;
#   *bash)
#     ;;
# esac

# Initialize a new python virtualenv.
nv() {
  virtualenv -p "$(command -v python3)" venv
  . venv/bin/activate && pip install pip-tools
}

alias m=yay

alias dw='dmesg -w'

alias lb='lsblk -o NAME,LABEL,FSTYPE,MOUNTPOINT,FSUSED,FSAVAIL,FSUSE%,SIZE,VENDOR'

# Update things.
#
# common things, based on machine type
u() {
  set -x
  if command -v yay >/dev/null 2>&1; then
    yay -Syu && echo
  fi
  if command -v brew >/dev/null 2>&1; then
    bup && echo
  fi
  if [ "$(uname -s)" = "Linux" ] && command -v apt >/dev/null 2>&1; then
    sudo apt update && sudo apt full-upgrade && sudo apt auto-remove
  fi
}
uu() {
  u
  cup
  vup
}
# vim update
vup() {
  vim \
    +PlugUpgrade \
    +PlugUpdate \
    +PlugClean \
    +qall
}
zup() {
  ~/.zsh/update.sh
}

touchp() {
  mkdir -p "$(dirname "$1")"
  touch "$1"
}

# Show info about the date, calendar, battery, and eventually other useful
# "dashboard" like things.
d() {
  cal
  echo "$BOLD"
  date
  echo "$NC"
  acpi
  # ip link show wlp2s0 && echo
  # iw dev wlp2s0 info
}

# Allow watch and xargs alias completion with space.
# https://unix.stackexchange.com/a/25329/162041
alias watch='watch --color '
alias xargs='xargs '

alias tree='tree -C'

# if command -v exa > /dev/null; then
#   alias ls='exa -F --group-directories-first'
#   alias lst='ls -T -L2'
# else
#   alias lst='tree -L 2'
# fi
# _j() {
#   case "$SHELL" in
#     *zsh) echo "%$1";;
#     *bash) echo "$1";;
#   esac
# }
# alias fg='fg $(_j $1)'
# alias bg='bg $(_j $1)'

# 1password
ops() {
  eval "$(op signin my)"
}
opf() {
  SMARTCASE=
  if echo "$@" | rg -q '^\s*(\p{Ll}\w*($|\s+))+'; then
    SMARTCASE='-i'
  fi
  op list items \
    | jq '.[] | .overview.title + "##" + .uuid' -r \
    | rg --color=always "$SMARTCASE" $@ \
    | column -t -s'##' \
    | sort
}
opx() {
  op get item "$1" \
    | jq -r '.details.fields | map(select(.name=="password")) | first | .value' \
    | xclip -i -sel clip
  {
    echo clearing clipboard in 60s
    sleep 60
    echo | xclip -i -sel clip
  } &
}

alias xc='xclip -i -sel clip'

#
# misc
#
bup() {
  set -x
  brew upgrade
  brew cleanup
}
cup() {
  set -x
  # rustup update nightly
  # cargo +nightly install-update -a
  rustup update
  cargo install-update -a
}

# Print out a line that spans the current width of the terminal. Takes no
# arguments.
div() {
  tput setaf 4
  tput bold
  printf "%$(tput cols)s\n" | tr " " =
  tput sgr0
}

path() {
  echo "$PATH" | tr ':' '\n'
}

alias rg='rg --no-heading --sort path -M1024'
ports() {
  lsof -i -n -P
}
# reload the shell
rld() {
  case "$SHELL" in
    *zsh) . ~/.zshrc ;;
    *bash) . ~/.bashrc ;;
  esac
}
# search aliases, and print them out in columns
ra() {
  alias | rg "$@" | rg "(\w+)='(.*)'" -r '$1%%$2' | column -t -s'%%'
}
# simple and quick HTTP server
serve() {
  local PORT="${1:-8000}"
  echo "http://localhost:$PORT"
  python3 -m http.server "$PORT" --bind 127.0.0.1
}

# Show what an alias or function is.
wh() {
  out=$(command -V $1)
  echo $out
  echo $out | grep -q 'is a shell function' && declare -f $1
}

lab() {
  cd ~/g/drive/notebooks || return
  . ./env/bin/activate
  jupyter notebook
}


#
# k8s + gcloud
#
alias gup='sudo gcloud components update'
alias k='kubectl'
alias kn='kubectl get no'
alias kpa='kp -a'
alias mkl='minikube service list'
alias wpa='wp -a'
# search for k8s pods
kp() {
  if [ -z "$1" ]; then
    kubectl get pods
  elif [ "$1" = '-a' ]; then
    kubectl get pods --all-namespaces
  else
    local PAT
    PAT="$(echo "$@" | tr -s ' ' '|')"
    HEADER=kubectl get pods --all-namespaces | head -1
    kubectl get pods --all-namespaces | rg -N --color=always "$PAT"
  fi
}
# watch k8s pods
wp() {
  export -f kp
  watch kp "$@"
}
# like kp but for deployments
kd() {
  if [ -z "$1" ]; then
    kubectl get deploy
  elif [ "$1" = '-a' ]; then
    kubectl get deploy --all-namespaces
  else
    local PAT="$(echo "$@" | tr -s ' ' '|')"
    kubectl get deploy --all-namespaces | head -1
    kubectl get deploy --all-namespaces | rg -N --color=always "$PAT"
  fi
}
# watch deployments
wd() {
  export -f kd
  watch kd "$@"
}

#
# golang
#
alias goi='go install -v ./... && go mod tidy'
alias gome='cd $FIRSTGOPATH/src/github.com/henrywallace'
gdoc() {
  echo http://localhost:6060
  godoc -play -notes="TODO|HELP|QUESTION|NOTE" -http :6060
}
gimp() {
  go list -f '{{ join .Imports "\n" }}' "$@" \
    | sort \
    | uniq -c \
    | sort -nk1
}

blinks() {
  if [ -n "$1" ]; then
    levels="$1"
  else
    levels="2"
  fi
  for fn in $(find . -maxdepth $levels -xtype l); do
    test -e $fn || echo "$fn##$DIM$(stat -c %z $fn | awk '{print $1}')$NC"
  done | column -t -s'##'
}

arx() {
  set -ex pipefile
  tar cf - "$1" -P | pv -s "$(du -sb "$1" | awk '{print $1}')" | gzip > "$1.tar.gz"
}

# Activate, and deactivate python virtualenvs, if applicable.
pe() {
  if [ -n "$VIRTUAL_ENV" ]; then
    deactivate
  fi
  local virtualenvs=$(fd -LI -d 3 -p '^.*/bin/activate$')
  local num=$(echo "$virtualenvs" | wc -l)
  head=$(echo $virtualenvs | head -n 1)
  tail=$(echo $virtualenvs | tail -n +2)
  if [ "$num" -gt 1 ]; then
    echo "${YELLOW}Warning, $num virtualenvs found, using first:$NC"
    echo -e "$BOLD$head$NC\n$DIM$tail$NC"
  fi
  . $(echo $virtualenvs | head -1)
}
de() {
  deactivate &> /dev/null
}
pp() {
  # TRAPEXIT() {
  #   deactivate &> /dev/null
  # }
  # pe

  script=$1

  if [ -z "$script" ]; then
    ipython
    return
  fi

  if echo "$script" | grep -qv ';'; then
    script="print($script)"
  fi
  eval python -c "'$script'"
}
pi() {
  local addr="$ADDR"
  [ -z "$addr" ] && addr="1.1.1.1"
  if ping -c 2 "$addr"; then
    echo "$BLUE${BOLD}Connected to the internet!$NC"
    out=$(iw dev wlp2s0 info)
    ssid=$(echo $out | rg ssid)
    ty=$(echo $out | rg type)
    echo $DIM
    echo "$NC"
  else
    echo "$YELLOW${BOLD}Not connected to the internet.$NC"
  fi
}
# Start a jupyter notebook if applicable.
pj() {
  # TODO: Can we figure out how to get this to
  TRAPEXIT() {
    deactivate
  }
  pe
  jupyter notebook
}

compose() {
  if [ -z "$1" ]; then
    echo must provide filename
    exit 1
  fi

  if [ -e "$1" ]; then
    mdpreview "$1"
    return
  fi
  mkdir -p "$(dirname "$1")"
  touch "$1"
  mdpreview "$1"
}

#
# git
#
gprune() {
  # include latest tag
  git branch --merge master \
    | grep -v master \
    | xargs git branch -d 2> /dev/null \
  || echo "No branches to prune."
}
alias con='rg --heading -C6 "<<<<<<<" $(git ls-files | sort -u)'
alias g-='git checkout -'
alias groot='git rev-parse --show-toplevel'
alias ga='git add -u'
alias a='git add -u'
# alias gp='git pull --rebase'
alias fold='git stash --keep-index && git stash'
alias gua='git reset --soft HEAD@{1} && git reset'
alias re='git reset'

alias gd='git diff'
alias gdc='git diff --cached'
alias gdd='git diff $(git merge-base master HEAD)'
alias gds='echo; git diff --stat; echo'
alias gf='git diff --name-only $(git merge-base master HEAD)'

alias gm='git branch -m'
alias gmp='git checkout master && git pull && gprune'
alias gn='git checkout -b'

alias gr='git rebase master'
alias rc='git rebase --continue'

alias pu='git push origin HEAD'
alias fpu='git push -f origin HEAD'

# alias gs=~/bin/git-status
alias gs='git status'
# gk() {
#   if [ -z "$@" ]; then
#     git commit
#   else
#     git commit -m "$@"
#   fi
# }
alias gk='git ck'
alias lg='git log --reverse --oneline $(git merge-base master HEAD)..HEAD --color=always'
alias clg='clear; lg'
alias lgs='git log --oneline --stat $(git merge-base master HEAD)..HEAD'
alias gp='git log --oneline origin/master..master'
alias gl='git log $(git merge-base master HEAD)..HEAD'
alias gls='git log --stat $(git merge-base master HEAD)..HEAD'
alias llg='git log --graph --oneline'
alias gap='git add -p'
alias lr='git log -n1 --stat'
alias lrp='git log -p -n1 --stat'
alias p='git stash show -p'
alias st='git stash --keep-index'
alias stl='git stash list'
alias stp='git stash pop'
# Rebase master or rebase back $1 commits.
rb () {
  if [ -z "$1" ]; then
    git rebase --keep-empty -i "$(git merge-base master HEAD)"
  elif echo "$1" | grep -Eq '^[0-9]+$'; then
    echo git rebase -i "HEAD~$1"
    git rebase --keep-empty -i "HEAD~$1"
  else
    echo git rebase -i "$1"
    git rebase --keep-empty -i "$1"
  fi
}
# git commit amend, with quick option for no-edit
gca() {
  if [ "$1" = "-" ]; then
    git commit --amend --no-edit --allow-empty
  else
    git commit --amend --allow-empty
  fi
}
# pretty git branches
alias gb=~/bin/git-branches
grst() {
  remote="$REMOTE"
  if [ -z "$remote" ]; then
    remote=origin
  fi
  git fetch "$remote" && git reset --hard "$remote/$(git branch | rg '\* (.*)' -or '$1')"
}
grb() {
  return
  root="$(git rev-parse --show-toplevel)"
  [[ -d "$root/.git/rebase-merge" ]] || [[ -d "$root/.git/rebase-apply" ]] || echo "Not rebasing" && return
  rebase="$(basename "$(find $root/.git/ -name 'rebase*')")"
  cat "$root/.git/$rebase/done" > /tmp/rebase-done
  cat "$root/.git/$rebase/git-rebase-todo" | rg '^[^#]' | sed '/^\s*$/d' > /tmp/rebase-todo
  num_done="$(wc -l /tmp/rebase-done | awk '{print $1}')"
  num_todo="$(wc -l /tmp/rebase-todo | awk '{print $1}')"
  echo "Branch: $(git branch | rg 'rebasing (.*)\)' -or '$1')"
  echo "Progress: ($num_done/$((num_done + num_todo)))"
  bat /tmp/rebase-done
  conflicts && echo
  bat /tmp/rebase-todo
}
#
gbs() {
  ref="$1"
  if [ -z "$ref" ]; then
    ref=HEAD
  fi
  git diff "$(git merge-base master $ref)..$ref"
}
